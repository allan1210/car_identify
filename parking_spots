import cv2
import numpy as np
import pytesseract
from pymongo import MongoClient
import time

x1_A1, y1_A1, x2_A1, y2_A1 = 100, 100, 200, 200 
x1_A2, y1_A2, x2_A2, y2_A2 = 250, 100, 350, 200  
x1_A3, y1_A3, x2_A3, y2_A3 = 400, 100, 500, 200  

parking_spots = {
    "A1": (x1_A1, y1_A1, x2_A1, y2_A1),
    "A2": (x1_A2, y1_A2, x2_A2, y2_A2),
    "A3": (x1_A3, y1_A3, x2_A3, y2_A3),
}

model_weights = 'yolov3.weights'
model_cfg = 'yolov3.cfg'
confidence_threshold = 0.1
parking_spot_ids = ["A1", "A2", "A3"]

client = MongoClient('mongodb://localhost:27017/')
db = client.parking_database
collection = db["parking_spots"]

net = cv2.dnn.readNet(model_weights, model_cfg)

cap = cv2.VideoCapture(0)
cap.set(3, 640)  
cap.set(4, 480)  

parked_vehicles = {}

def is_within_parking_spot(x, y, parking_spot):
    x1, y1, x2, y2 = parking_spot

    if x1 <= x <= x2 and y1 <= y <= y2:
        return True
    return False

remaining_spots = len(parking_spot_ids) - len(parked_vehicles)

while True:
    ret, frame = cap.read()

    if not ret:
        break

    blob = cv2.dnn.blobFromImage(frame, 1/255.0, (416, 416), swapRB=True, crop=False)
    net.setInput(blob)
    out_layers = net.getUnconnectedOutLayersNames()
    outs = net.forward(out_layers)

    parking_lot_status = {spot_id: "空位" for spot_id in parking_spot_ids}

    recognized_plates = []
    
    for vehicle_id, data in list(parked_vehicles.items()):
        spot_id, enter_time = data
        current_time = time.time()
        parked_time = current_time - enter_time

        cv2.putText(frame, f"車牌: {vehicle_id}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        cv2.putText(frame, f"停放時間: {int(parked_time)} 秒", (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        cv2.putText(frame, f"車位: {spot_id}", (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        cv2.putText(frame, f"剩餘停車位數: {remaining_spots}", (10, 120), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    parked_vehicles = {} 

    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]

            if confidence > confidence_threshold and class_id == 0:
                center_x = int(detection[0] * frame.shape[1])
                center_y = int(detection[1] * frame.shape[0])
                w = int(detection[2] * frame.shape[1])
                h = int(detection[3] * frame.shape[0])
                x1 = int(center_x - w / 2)
                y1 = int(center_y - h / 2)
                x2 = x1 + w
                y2 = y1 + h
                
                vehicle_roi = frame[y1:y2, x1:x2]
                license_plate = pytesseract.image_to_string(vehicle_roi, config='--psm 7')

                if license_plate:
                    recognized_plates.append((license_plate, (x1, y1, x2, y2)))

    for spot_id in parking_spot_ids:
        for plate, (x1, y1, x2, y2) in recognized_plates:
            if is_within_parking_spot(x1, y1, parking_spots[spot_id]):
                parking_lot_status[spot_id] = "占用"
                if plate not in parked_vehicles:
                    parked_vehicles[plate] = (spot_id, time.time())
                cv2.putText(frame, f"車牌: {plate}", (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

    for spot_id, status in parking_lot_status.items():
        cv2.putText(frame, f"車位 {spot_id}: {status}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
        collection.update_one({"spot_id": spot_id}, {"$set": {"status": status}}, upsert=True)

    cv2.imshow('Parking Lot Detection', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

client.close()
