import cv2
import numpy as np
import pytesseract
from pymongo import MongoClient
import time

# 使用实际坐标表示停车位的位置
A1_left_top = (102, 122)
A1_left_bottom = (102, 122)
A1_right_top = (102, 122)
A1_right_bottom = (184, 338)

A2_left_top = (102, 122)
A2_left_bottom = (102, 122)
A2_right_top = (102, 122)
A2_right_bottom = (184, 338)

A3_left_top = (102, 122)
A3_left_bottom = (102, 122)
A3_right_top = (102, 122)
A3_right_bottom = (184, 338)

# 更新停车位字典
parking_spots = {
    "A1": (A1_left_top,A1_left_bottom,A1_right_top,A1_right_bottom),
    "A2": (A2_left_top,A2_left_bottom,A2_right_top,A2_right_bottom),
    "A3": (A3_left_top,A3_left_bottom,A3_right_top,A3_right_bottom),
}


model_weights = 'yolov3.weights'
model_cfg = 'yolov3.cfg'
confidence_threshold = 0.5
parking_spot_ids = ["A1", "A2", "A3"]

client = MongoClient('mongodb://localhost:27017/')
db = client.parking_database
collection = db["parking_spots"]

net = cv2.dnn.readNet(model_weights, model_cfg)

cap = cv2.VideoCapture(0)
cap.set(3, 640)
cap.set(4, 480)

parked_vehicles = {}

def is_within_parking_spot(x, y, parking_spot):
    x1, y1, x2, y2 = parking_spot
    return x1 <= x <= x2 and y1 <= y <= y2

remaining_spots = len(parking_spot_ids) - len(parked_vehicles)

def recognize_license_plates(frame):
    plates = []
    
    blob = cv2.dnn.blobFromImage(frame, 1/255.0, (416, 416), swapRB=True, crop=False)
    net.setInput(blob)
    out_layers = net.getUnconnectedOutLayersNames()
    outs = net.forward(out_layers)

    for detection in outs[0]:
        scores = detection[5:]
        class_id = np.argmax(scores)
        confidence = scores[class_id]

        if confidence > confidence_threshold and class_id == 0:
            center_x = int(detection[0] * frame.shape[1])
            center_y = int(detection[1] * frame.shape[0])
            w = int(detection[2] * frame.shape[1])
            h = int(detection[3] * frame.shape[0])
            x1 = int(center_x - w / 2)
            y1 = int(center_y - h / 2)
            x2 = x1 + w
            y2 = y1 + h

            plates.append((frame[y1:y2, x1:x2], (x1, y1, x2, y2)))

    return plates

while True:
    ret, frame = cap.read()

    if not ret:
        print("沒有影像")
        break

    plates = recognize_license_plates(frame)

    recognized_plates = []
    for plate, (x1, y1, x2, y2) in plates:
        license_plate = pytesseract.image_to_string(plate, config='--psm 7', lang='eng')
        recognized_plates.append((license_plate, (x1, y1, x2, y2)))

    for spot_id, parking_spot in parking_spots.items():
        for license_plate, plate_coords in recognized_plates:
            if is_within_parking_spot(plate_coords[0], plate_coords[1], parking_spot):
                parking_lot_status = "Occupied" if license_plate else "Vacant"
                cv2.putText(frame, f"Parking Spot {spot_id}: {parking_lot_status}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

                if license_plate:
                    if license_plate not in parked_vehicles:
                        parked_vehicles[license_plate] = (spot_id, time.time())
                    cv2.putText(frame, f"License Plate: {license_plate}", (plate_coords[0], plate_coords[1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                    cv2.rectangle(frame, (plate_coords[0], plate_coords[1]), (plate_coords[2], plate_coords[3]), (0, 255, 0), 2)

    cv2.putText(frame, f"Remaining Parking Spots: {remaining_spots}", (10, 120), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    cv2.imshow('Parking', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
client.close()

