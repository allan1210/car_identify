import cv2
import os
import imutils
import numpy as np
import pytesseract
import easyocr
from pymongo import MongoClient
from datetime import datetime
from bson import ObjectId

# 与MongoDB建立连接
client = MongoClient('mongodb://localhost:27017/')
db = client['車牌辨識資料庫']
collection = db['車牌']

# 打开摄像头
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("無法打開攝像頭")
    exit()

# 图像处理函数
def preprocess_image(image):
    if image is None:
        return None
    resized_image = imutils.resize(image, width=500)
    gray = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)
    gray = cv2.bilateralFilter(gray, 11, 50, 50)
    edged = cv2.Canny(gray, 50, 150)
    return edged

# 車牌識別函数
def recognize_license_plate(frame):
    edged = preprocess_image(frame)
    license_plate_text = None
    NumberPlateCnt = None

    contours, _ = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)


    for contour in contours:
        if cv2.contourArea(contour) < 1000:
            continue
        peri = cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, 0.02 * peri, True)
        if len(approx) == 4:
            NumberPlateCnt = approx

            mask = np.zeros(edged.shape[:2], dtype=np.uint8)
            new_image = cv2.drawContours(mask, [NumberPlateCnt], -1, (255, 255, 255), thickness=cv2.FILLED)
            frame = cv2.convertScaleAbs(frame)
            mask = cv2.convertScaleAbs(mask)
            resized_mask = cv2.resize(mask, (frame.shape[1], frame.shape[0]))
            new_image = cv2.bitwise_and(frame, frame, mask=resized_mask)
            gray = cv2.cvtColor(new_image, cv2.COLOR_BGR2GRAY)
            ret, thresh1 = cv2.threshold(gray, 120, 255, cv2.THRESH_BINARY)
            cv2.imwrite('thresh1.jpg', thresh1)

            text = pytesseract.image_to_string(thresh1, lang='eng', config='--psm 11')
            reader = easyocr.Reader(['en'], gpu=True)
            result = reader.readtext(thresh1)

            for detection in result:
                if detection[1] == 'TW':
                    text = detection[0]
                    break

            if text:
                print("車牌:", text)
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print("當前時間:", current_time)
                license_plate_text = text
                
                # 框出车牌
                x, y, w, h = cv2.boundingRect(NumberPlateCnt)
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                
                return license_plate_text

# 将车牌保存进MongoDB
def save_license_plate(plate_number):
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    data = {'車牌': plate_number, '時間': current_time}
    data['_id'] = ObjectId()

    result = collection.insert_one(data)

    if result.inserted_id:
        print("數據插入成功")
    else:
        print("數據插入失败")

# 跟踪已经插入的车牌号码
inserted_license_plates = set()

# 创建一个窗口来显示摄像头画面
cv2.namedWindow('Camera Feed', cv2.WINDOW_NORMAL)
cv2.setWindowProperty('Camera Feed', cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_NORMAL)

# 主循环
while True:
    ret, frame = cap.read()

    if not ret:
        print("無法讀取")
        break

    car_in_frame = False
    license_plate_text = recognize_license_plate(frame)

    if license_plate_text:
        # 检查是否已经插入过这个车牌号码
        if license_plate_text not in inserted_license_plates:
            inserted_license_plates.add(license_plate_text)
            # 输出结果
            print("車牌號碼:", license_plate_text)
            save_license_plate(license_plate_text)

    # 显示摄像头画面
    cv2.imshow('Camera Feed', frame)
    cv2.waitKey(1)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# 释放摄像头资源
cv2.destroyAllWindows()
cap.release()

# 关闭MongoDB连接
client.close()
