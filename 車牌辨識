import cv2
import imutils
import os
import numpy as np
import pytesseract
import easyocr
from pymongo import MongoClient
from datetime import datetime
import matplotlib.pyplot as plt



client = MongoClient('mongodb://localhost:27017/')
db = client['車牌辨識資料庫']
collection = db['車牌']

cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("無法打開攝像頭")
    exit()

car_in_frame = False
previous_frame = None


os.environ['KMP_DUPLICATE_LIB_OK'] = 'TRUE'

def preprocess_image(image):
    if image is None:
        return None
    resized_image = imutils.resize(image, width=500)
    gray = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)
    gray = cv2.bilateralFilter(gray, 11, 50, 50)
    edged = cv2.Canny(gray, 50, 150)
    return edged


def recognize_license_plate(frame):
    edged = preprocess_image(frame)
    license_plate_text = None

    contours, hierarchy = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
    cnts = contours if imutils.is_cv2() else contours[0]
    thresholds = [cv2.threshold(edged, t, 255, cv2.THRESH_BINARY)[1] for t in range(0, 255, 25)]

    for thresh in thresholds:
        cnts, new = cv2.findContours(thresh.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
        cnts = sorted(cnts, key=cv2.contourArea, reverse=True)[:30]
        NumberPlateCnt = None

        for c in cnts:
            peri = cv2.arcLength(c, True)
            approx = cv2.approxPolyDP(c, 0.02 * peri, True)
            if len(approx) == 4:
                NumberPlateCnt = approx
                break

        if NumberPlateCnt is not None:
            mask = np.zeros(edged.shape[:2], dtype=np.uint8)
            new_image = cv2.drawContours(mask, [NumberPlateCnt], -1, (255, 255, 255), thickness=cv2.FILLED)
            frame = cv2.convertScaleAbs(frame)  
            mask = cv2.convertScaleAbs(mask) 
            resized_mask = cv2.resize(mask, (frame.shape[1], frame.shape[0]))
            new_image = cv2.bitwise_and(frame, frame, mask=resized_mask)
            gray = cv2.cvtColor(new_image, cv2.COLOR_BGR2GRAY)
            ret, thresh1 = cv2.threshold(gray, 120, 255, cv2.THRESH_BINARY)
            cv2.imwrite('thresh1.jpg', thresh1)
            text = pytesseract.image_to_string(thresh1, lang='eng', config='--psm 11')
            reader = easyocr.Reader(['en'],gpu=True)
            result = reader.readtext(thresh1)

            for detection in result:
                if detection[1] == 'TW':
                    text = detection[0]
                    break

            if text:
                print("車牌號碼是:", text)
                now = datetime.now()
                current_time = now.strftime("%H:%M:%S")
                print("現在時刻:", current_time)
                license_plate_text = text
                plt.imshow(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
                plt.show()
            else:
                print("找不到車牌區域")
                

    return license_plate_text


def save_license_plate(plate_number):
    now = datetime.now()
    current_time = now.strftime("%H:%M:%S")
    data = {'車牌': plate_number, '時間': current_time}
    result = collection.insert_one(data)
    if result.inserted_id:
        print("數據插入成功")
    else:
        print("數據插入失敗")
cv2.namedWindow('車牌辨識結果', cv2.WINDOW_NORMAL)
        

enable_license_plate_recognition = False


while True:
    ret, frame = cap.read()

    if not ret:
        print("無法讀取")
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (21, 21), 0)

    if previous_frame is None:
        previous_frame = gray
        continue

    frame_delta = cv2.absdiff(previous_frame, gray)
    thresh = cv2.threshold(frame_delta, 30, 255, cv2.THRESH_BINARY)[1]
    thresh = cv2.dilate(thresh, None, iterations=2)
    contours, _ = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    car_in_frame = False
    for contour in contours:
        if cv2.contourArea(contour) < 1000:
            continue
        (x, y, w, h) = cv2.boundingRect(contour)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
        car_in_frame = True

    previous_frame = gray.copy()

    if car_in_frame:
        enable_license_plate_recognition = True
        license_plate_text = recognize_license_plate(frame)

        if enable_license_plate_recognition and license_plate_text:
            # 输出识别结果到控制台
            print("車牌號碼是:", license_plate_text)
            now = datetime.now()
            current_time = now.strftime("%H:%M:%S")
            print("現在時刻:", current_time)
            save_license_plate(license_plate_text)
            cv2.imshow('Real-time Video', frame)


    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cv2.destroyAllWindows()
cap.release()
